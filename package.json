{
  "name": "app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@ljharb/eslint-config": "^12.2.1",
    "apollo-fetch": "^0.7.0",
    "apollo-server-express": "1.3.2",
    "assert": "^1.4.1",
    "autoprefixer": "7.1.1",
    "babel-cli": "^6.26.0",
    "babel-core": "6.25.0",
    "babel-eslint": "^8.2.1",
    "babel-jest": "20.0.3",
    "babel-plugin-syntax-async-functions": "^6.13.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-polyfill": "^6.26.0",
    "babel-preset-env": "^1.6.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-es2016": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "babel-runtime": "^6.26.0",
    "babel-watch": "^2.0.8",
    "better-require": "0.0.3",
    "body-parser": "^1.17.2",
    "camelcase": "^5.0.0",
    "camelcase-keys": "^4.1.0",
    "chalk": "1.1.3",
    "compression-webpack-plugin": "^1.0.1",
    "html-webpack-plugin": "^2.30.1",
    "webpack": "2.6.1",
    "webpack-dev-server": "2.5.0",
    "webpack-manifest-plugin": "1.1.0",
    "concurrently": "^3.6.1",
    "dotenv": "4.0.0",
    "dotenv-expand": "^4.0.1",
    "eslint": "^4.17.0",
    "eslint-config-react-app": "^1.0.5",
    "eslint-loader": "1.7.1",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-jsx-a11y": "5.0.3",
    "eslint-plugin-react": "^7.3.0",
    "express": "^4.15.3",
    "express-basic-auth": "^1.1.3",
    "express-graphql": "0.6.12",
    "express-session": "^1.15.5",
    "file-loader": "0.11.2",
    "flickrapi": "^0.6.0",
    "fs-extra": "3.0.1",
    "generate-password": "^1.3.0",
    "google-auth-library": "^2.0.0",
    "googleapis": "^32.0.0",
    "graphql": "0.13",
    "graphql-iso-date": "^3.3.0",
    "graphql-server-express": "1.3.2",
    "graphql-tag": "^2.10.0",
    "graphql-tools": "2.21.0",
    "graphql-type-json": "^0.2.1",
    "inquirer": "^3.3.0",
    "jsonwebtoken": "^8.1.0",
    "knex": "0.16.3",
    "limiter": "^1.1.4",
    "lodash": "^4.17.4",
    "mime": "^2.0.3",
    "mime-types": "^2.1.22",
    "moment": "^2.20.1",
    "morgan": "^1.8.2",
    "npm": "^6.4.1",
    "opn": "^5.3.0",
    "parse-error": "^0.2.0",
    "performance-now": "^2.1.0",
    "pg": "^7.4.3",
    "postcss-flexbugs-fixes": "3.0.0",
    "postcss-loader": "2.0.6",
    "postmark": "^1.5.0",
    "prettier": "^1.10.2",
    "prop-types": "^15.5.10",
    "require-text": "^0.0.1",
    "sanitize-html": "^1.16.1",
    "server-destroy": "^1.0.1",
    "session-file-store": "^1.1.2",
    "shortid": "^2.2.8",
    "snakecase-keys": "^1.2.0",
    "string-to-stream": "^1.1.1",
    "tmp": "^0.0.33",
    "whatwg-fetch": "^2.0.3",
    "xhr": "^2.5.0",
    "xml-js": "^1.6.11"
  },
  "scripts": {
    "start": "eval $(./scripts/ecosystem-env.js local) && concurrently --kill-others \"babel-watch -L --watch server server/index.js\" \"npm run client\"",
    "startSDB": "eval $(./scripts/ecosystem-env.js localStagingDB) && concurrently --kill-others \"babel-watch -L --watch server server/index.js -x server/dataFetchers\" \"npm run client\"",
    "server": "babel-watch -L --watch server server/index.js -x server/dataFetchers",
    "server-with-env": "eval $(./scripts/ecosystem-env.js local) && yarn server",
    "client": "node ./scripts/start-client.js",
    "build": ". ./.env && pushd ./client && node ./scripts/build.js && popd",
    "genUser": ". ./.env && babel-node ./scripts/genUser.js",
    "headlessTest": "karma start --single-run --browsers ChromeHeadless karma.conf.js",
    "mochaTest": "",
    "runTestDotJs": "eval $(./scripts/ecosystem-env.js local) && babel-node ./test.js",
    "dangerousDBFromScript": "eval $(./scripts/ecosystem-env.js local) && (dropdb -U \"$POSTGRES_USER\" --if-exists \"$POSTGRES_DB\"; createdb -U \"$POSTGRES_USER\" \"$POSTGRES_DB\") && knex migrate:latest && knex seed:run",
    "dangerousDBFromDumpNoEnv": "export PGPASSWORD=$POSTGRES_PASSWORD && (dropdb -U \"$POSTGRES_USER\" --if-exists \"$POSTGRES_DB\"; createdb -U \"$POSTGRES_USER\" \"$POSTGRES_DB\") && (psql -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" < testDBDumps/latest.dump) && knex migrate:latest",
    "dangerousDBFromDumpStaging": "eval $(./scripts/ecosystem-env.js staging) && yarn dangerousDBFromDumpNoEnv && export PGPASSWORD=$POSTGRES_PASSWORD && echo \"GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO data_hatch; GRANT ALL PRIVILEGES ON DATABASE \"$POSTGRES_DB\" TO data_hatch;\" | psql \"$POSTGRES_DB\" -U \"$POSTGRES_USER\" ",
    "justGrant": "eval $(./scripts/ecosystem-env.js staging) && export PGPASSWORD=$POSTGRES_PASSWORD && echo \"GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO data_hatch; GRANT ALL PRIVILEGES ON DATABASE \"$POSTGRES_DB\" TO data_hatch;\" | psql \"$POSTGRES_DB\" -U \"$POSTGRES_USER\" ",
    "dangerousDBFromDump": "eval $(./scripts/ecosystem-env.js local) && yarn dangerousDBFromDumpNoEnv",
    "migrateToLatestNoEnv": "knex migrate:latest",
    "rollbackNoEnv": "knex migrate:rollback",
    "migrateToLatest": "eval $(./scripts/ecosystem-env.js local) && yarn migrateToLatestNoEnv",
    "rollback": "eval $(./scripts/ecosystem-env.js local) && yarn rollbackNoEnv",
    "migrateStagingRemotely": "eval $(./scripts/ecosystem-env.js localStagingDB) && yarn migrateToLatestNoEnv",
    "rollbackStagingRemotely": "eval $(./scripts/ecosystem-env.js localStagingDB) && yarn rollbackNoEnv",
    "migrateStagingToLatest": "eval $(./scripts/ecosystem-env.js staging) && babel-node views/dropAllViews.js && knex migrate:latest && babel-node views/refreshAllViews.js",
    "migrateProdToLatest": "eval $(./scripts/ecosystem-env.js app) && knex migrate:latest",
    "genJSDocs": "yarn jsdoc -- -c jsdocConf.json -r -d docs/generatedJSDocs"
  },
  "jest": {
    "collectCoverageFrom": [
      "server/**/*.{js,jsx}"
    ],
    "setupFiles": [
      "<rootDir>/server/config/jest.init.js"
    ],
    "testMatch": [
      "<rootDir>/server/**/__tests__/**/*.js?(x)",
      "<rootDir>/server/**/?(*.)(spec|test).js?(x)"
    ],
    "testEnvironment": "node",
    "testURL": "http://localhost",
    "transform": {
      "^.+\\.(js|jsx)$": "<rootDir>/node_modules/babel-jest",
      "^(?!.*\\.(js|jsx|css|json)$)": "<rootDir>/client/config/jest/fileTransform.js"
    },
    "transformIgnorePatterns": [
      "[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"
    ],
    "moduleNameMapper": {
      "^react-native$": "react-native-web"
    },
    "moduleFileExtensions": [
      "web.js",
      "js",
      "json",
      "web.jsx",
      "jsx"
    ]
  },
  "babel": {
    "presets": [
      "es2015",
      "stage-0"
    ]
  },
  "eslintConfig": {},
  "devDependencies": {
    "chai": "^4.1.2",
    "eslint-plugin-mocha": "^5.1.0",
    "karma": "^2.0.0",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-mocha": "^1.3.0",
    "mocha": "^5.2.0"
  }
}
